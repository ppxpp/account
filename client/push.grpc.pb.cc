// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: push.proto

#include "push.pb.h"
#include "push.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace push {

static const char* PushChannel_method_names[] = {
  "/push.PushChannel/Connect",
};

std::unique_ptr< PushChannel::Stub> PushChannel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PushChannel::Stub> stub(new PushChannel::Stub(channel));
  return stub;
}

PushChannel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Connect_(PushChannel_method_names[0], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::push::Cmd, ::push::Notify>* PushChannel::Stub::ConnectRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::push::Cmd, ::push::Notify>::Create(channel_.get(), rpcmethod_Connect_, context);
}

void PushChannel::Stub::experimental_async::Connect(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::push::Cmd,::push::Notify>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::push::Cmd,::push::Notify>::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::push::Cmd, ::push::Notify>* PushChannel::Stub::AsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::push::Cmd, ::push::Notify>::Create(channel_.get(), cq, rpcmethod_Connect_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::push::Cmd, ::push::Notify>* PushChannel::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::push::Cmd, ::push::Notify>::Create(channel_.get(), cq, rpcmethod_Connect_, context, false, nullptr);
}

PushChannel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushChannel_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PushChannel::Service, ::push::Cmd, ::push::Notify>(
          std::mem_fn(&PushChannel::Service::Connect), this)));
}

PushChannel::Service::~Service() {
}

::grpc::Status PushChannel::Service::Connect(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::push::Notify, ::push::Cmd>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* PushProxy_method_names[] = {
  "/push.PushProxy/PushToClient",
};

std::unique_ptr< PushProxy::Stub> PushProxy::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PushProxy::Stub> stub(new PushProxy::Stub(channel));
  return stub;
}

PushProxy::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushToClient_(PushProxy_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PushProxy::Stub::PushToClient(::grpc::ClientContext* context, const ::push::NotifyWrapper& request, ::push::Ret* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushToClient_, context, request, response);
}

void PushProxy::Stub::experimental_async::PushToClient(::grpc::ClientContext* context, const ::push::NotifyWrapper* request, ::push::Ret* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushToClient_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::push::Ret>* PushProxy::Stub::AsyncPushToClientRaw(::grpc::ClientContext* context, const ::push::NotifyWrapper& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::push::Ret>::Create(channel_.get(), cq, rpcmethod_PushToClient_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::push::Ret>* PushProxy::Stub::PrepareAsyncPushToClientRaw(::grpc::ClientContext* context, const ::push::NotifyWrapper& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::push::Ret>::Create(channel_.get(), cq, rpcmethod_PushToClient_, context, request, false);
}

PushProxy::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PushProxy_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PushProxy::Service, ::push::NotifyWrapper, ::push::Ret>(
          std::mem_fn(&PushProxy::Service::PushToClient), this)));
}

PushProxy::Service::~Service() {
}

::grpc::Status PushProxy::Service::PushToClient(::grpc::ServerContext* context, const ::push::NotifyWrapper* request, ::push::Ret* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace push

