// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from auth.djinni

package me.ppxpp.account.auth;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Auth {
    public abstract AuthReply signUp(UserInfo user);

    public abstract AuthReply signIn(UserInfo user);

    public abstract AuthReply signOut(AuthInfo auth);

    public abstract int update(UserInfo user);

    public static Auth create()
    {
        return CppProxy.create();
    }

    private static final class CppProxy extends Auth
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public AuthReply signUp(UserInfo user)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_signUp(this.nativeRef, user);
        }
        private native AuthReply native_signUp(long _nativeRef, UserInfo user);

        @Override
        public AuthReply signIn(UserInfo user)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_signIn(this.nativeRef, user);
        }
        private native AuthReply native_signIn(long _nativeRef, UserInfo user);

        @Override
        public AuthReply signOut(AuthInfo auth)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_signOut(this.nativeRef, auth);
        }
        private native AuthReply native_signOut(long _nativeRef, AuthInfo auth);

        @Override
        public int update(UserInfo user)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_update(this.nativeRef, user);
        }
        private native int native_update(long _nativeRef, UserInfo user);

        public static native Auth create();
    }
}
