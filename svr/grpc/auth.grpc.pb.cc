// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto

#include "auth.pb.h"
#include "auth.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace auth {

static const char* Auth_method_names[] = {
  "/auth.Auth/SignUp",
  "/auth.Auth/SignIn",
  "/auth.Auth/SignOut",
};

std::unique_ptr< Auth::Stub> Auth::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Auth::Stub> stub(new Auth::Stub(channel));
  return stub;
}

Auth::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SignUp_(Auth_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignIn_(Auth_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignOut_(Auth_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Auth::Stub::SignUp(::grpc::ClientContext* context, const ::auth::UserInfo& request, ::auth::AuthReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignUp_, context, request, response);
}

void Auth::Stub::experimental_async::SignUp(::grpc::ClientContext* context, const ::auth::UserInfo* request, ::auth::AuthReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignUp_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::auth::AuthReply>* Auth::Stub::AsyncSignUpRaw(::grpc::ClientContext* context, const ::auth::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::AuthReply>::Create(channel_.get(), cq, rpcmethod_SignUp_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auth::AuthReply>* Auth::Stub::PrepareAsyncSignUpRaw(::grpc::ClientContext* context, const ::auth::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::AuthReply>::Create(channel_.get(), cq, rpcmethod_SignUp_, context, request, false);
}

::grpc::Status Auth::Stub::SignIn(::grpc::ClientContext* context, const ::auth::UserInfo& request, ::auth::AuthReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignIn_, context, request, response);
}

void Auth::Stub::experimental_async::SignIn(::grpc::ClientContext* context, const ::auth::UserInfo* request, ::auth::AuthReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignIn_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::auth::AuthReply>* Auth::Stub::AsyncSignInRaw(::grpc::ClientContext* context, const ::auth::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::AuthReply>::Create(channel_.get(), cq, rpcmethod_SignIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auth::AuthReply>* Auth::Stub::PrepareAsyncSignInRaw(::grpc::ClientContext* context, const ::auth::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::AuthReply>::Create(channel_.get(), cq, rpcmethod_SignIn_, context, request, false);
}

::grpc::Status Auth::Stub::SignOut(::grpc::ClientContext* context, const ::auth::AuthInfo& request, ::auth::AuthReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignOut_, context, request, response);
}

void Auth::Stub::experimental_async::SignOut(::grpc::ClientContext* context, const ::auth::AuthInfo* request, ::auth::AuthReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignOut_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::auth::AuthReply>* Auth::Stub::AsyncSignOutRaw(::grpc::ClientContext* context, const ::auth::AuthInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::AuthReply>::Create(channel_.get(), cq, rpcmethod_SignOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::auth::AuthReply>* Auth::Stub::PrepareAsyncSignOutRaw(::grpc::ClientContext* context, const ::auth::AuthInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::auth::AuthReply>::Create(channel_.get(), cq, rpcmethod_SignOut_, context, request, false);
}

Auth::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::auth::UserInfo, ::auth::AuthReply>(
          std::mem_fn(&Auth::Service::SignUp), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::auth::UserInfo, ::auth::AuthReply>(
          std::mem_fn(&Auth::Service::SignIn), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Auth_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Auth::Service, ::auth::AuthInfo, ::auth::AuthReply>(
          std::mem_fn(&Auth::Service::SignOut), this)));
}

Auth::Service::~Service() {
}

::grpc::Status Auth::Service::SignUp(::grpc::ServerContext* context, const ::auth::UserInfo* request, ::auth::AuthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Auth::Service::SignIn(::grpc::ServerContext* context, const ::auth::UserInfo* request, ::auth::AuthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Auth::Service::SignOut(::grpc::ServerContext* context, const ::auth::AuthInfo* request, ::auth::AuthReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace auth

