// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef PROTOBUF_INCLUDED_auth_2eproto
#define PROTOBUF_INCLUDED_auth_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_auth_2eproto 

namespace protobuf_auth_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_auth_2eproto
namespace auth {
class AuthInfo;
class AuthInfoDefaultTypeInternal;
extern AuthInfoDefaultTypeInternal _AuthInfo_default_instance_;
class AuthReply;
class AuthReplyDefaultTypeInternal;
extern AuthReplyDefaultTypeInternal _AuthReply_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace auth
namespace google {
namespace protobuf {
template<> ::auth::AuthInfo* Arena::CreateMaybeMessage<::auth::AuthInfo>(Arena*);
template<> ::auth::AuthReply* Arena::CreateMaybeMessage<::auth::AuthReply>(Arena*);
template<> ::auth::UserInfo* Arena::CreateMaybeMessage<::auth::UserInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace auth {

// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(NULL);
  }

  UserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string pwdHash = 2;
  void clear_pwdhash();
  static const int kPwdHashFieldNumber = 2;
  const ::std::string& pwdhash() const;
  void set_pwdhash(const ::std::string& value);
  #if LANG_CXX11
  void set_pwdhash(::std::string&& value);
  #endif
  void set_pwdhash(const char* value);
  void set_pwdhash(const char* value, size_t size);
  ::std::string* mutable_pwdhash();
  ::std::string* release_pwdhash();
  void set_allocated_pwdhash(::std::string* pwdhash);

  // string device = 3;
  void clear_device();
  static const int kDeviceFieldNumber = 3;
  const ::std::string& device() const;
  void set_device(const ::std::string& value);
  #if LANG_CXX11
  void set_device(::std::string&& value);
  #endif
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  ::std::string* mutable_device();
  ::std::string* release_device();
  void set_allocated_device(::std::string* device);

  // @@protoc_insertion_point(class_scope:auth.UserInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr pwdhash_;
  ::google::protobuf::internal::ArenaStringPtr device_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.AuthReply) */ {
 public:
  AuthReply();
  virtual ~AuthReply();

  AuthReply(const AuthReply& from);

  inline AuthReply& operator=(const AuthReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthReply(AuthReply&& from) noexcept
    : AuthReply() {
    *this = ::std::move(from);
  }

  inline AuthReply& operator=(AuthReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthReply* internal_default_instance() {
    return reinterpret_cast<const AuthReply*>(
               &_AuthReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthReply* other);
  friend void swap(AuthReply& a, AuthReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthReply* New() const final {
    return CreateMaybeMessage<AuthReply>(NULL);
  }

  AuthReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthReply& from);
  void MergeFrom(const AuthReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .auth.AuthInfo data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  private:
  const ::auth::AuthInfo& _internal_data() const;
  public:
  const ::auth::AuthInfo& data() const;
  ::auth::AuthInfo* release_data();
  ::auth::AuthInfo* mutable_data();
  void set_allocated_data(::auth::AuthInfo* data);

  // int32 err = 1;
  void clear_err();
  static const int kErrFieldNumber = 1;
  ::google::protobuf::int32 err() const;
  void set_err(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:auth.AuthReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::auth::AuthInfo* data_;
  ::google::protobuf::int32 err_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:auth.AuthInfo) */ {
 public:
  AuthInfo();
  virtual ~AuthInfo();

  AuthInfo(const AuthInfo& from);

  inline AuthInfo& operator=(const AuthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthInfo(AuthInfo&& from) noexcept
    : AuthInfo() {
    *this = ::std::move(from);
  }

  inline AuthInfo& operator=(AuthInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthInfo* internal_default_instance() {
    return reinterpret_cast<const AuthInfo*>(
               &_AuthInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AuthInfo* other);
  friend void swap(AuthInfo& a, AuthInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthInfo* New() const final {
    return CreateMaybeMessage<AuthInfo>(NULL);
  }

  AuthInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthInfo& from);
  void MergeFrom(const AuthInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string token = 1;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:auth.AuthInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_auth_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// string userName = 1;
inline void UserInfo::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::username() const {
  // @@protoc_insertion_point(field_get:auth.UserInfo.userName)
  return username_.GetNoArena();
}
inline void UserInfo::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.UserInfo.userName)
}
#if LANG_CXX11
inline void UserInfo::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.UserInfo.userName)
}
#endif
inline void UserInfo::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.UserInfo.userName)
}
inline void UserInfo::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.UserInfo.userName)
}
inline ::std::string* UserInfo::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:auth.UserInfo.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_username() {
  // @@protoc_insertion_point(field_release:auth.UserInfo.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:auth.UserInfo.userName)
}

// string pwdHash = 2;
inline void UserInfo::clear_pwdhash() {
  pwdhash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::pwdhash() const {
  // @@protoc_insertion_point(field_get:auth.UserInfo.pwdHash)
  return pwdhash_.GetNoArena();
}
inline void UserInfo::set_pwdhash(const ::std::string& value) {
  
  pwdhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.UserInfo.pwdHash)
}
#if LANG_CXX11
inline void UserInfo::set_pwdhash(::std::string&& value) {
  
  pwdhash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.UserInfo.pwdHash)
}
#endif
inline void UserInfo::set_pwdhash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwdhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.UserInfo.pwdHash)
}
inline void UserInfo::set_pwdhash(const char* value, size_t size) {
  
  pwdhash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.UserInfo.pwdHash)
}
inline ::std::string* UserInfo::mutable_pwdhash() {
  
  // @@protoc_insertion_point(field_mutable:auth.UserInfo.pwdHash)
  return pwdhash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_pwdhash() {
  // @@protoc_insertion_point(field_release:auth.UserInfo.pwdHash)
  
  return pwdhash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_pwdhash(::std::string* pwdhash) {
  if (pwdhash != NULL) {
    
  } else {
    
  }
  pwdhash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwdhash);
  // @@protoc_insertion_point(field_set_allocated:auth.UserInfo.pwdHash)
}

// string device = 3;
inline void UserInfo::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserInfo::device() const {
  // @@protoc_insertion_point(field_get:auth.UserInfo.device)
  return device_.GetNoArena();
}
inline void UserInfo::set_device(const ::std::string& value) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.UserInfo.device)
}
#if LANG_CXX11
inline void UserInfo::set_device(::std::string&& value) {
  
  device_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.UserInfo.device)
}
#endif
inline void UserInfo::set_device(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.UserInfo.device)
}
inline void UserInfo::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.UserInfo.device)
}
inline ::std::string* UserInfo::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:auth.UserInfo.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_device() {
  // @@protoc_insertion_point(field_release:auth.UserInfo.device)
  
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:auth.UserInfo.device)
}

// -------------------------------------------------------------------

// AuthReply

// int32 err = 1;
inline void AuthReply::clear_err() {
  err_ = 0;
}
inline ::google::protobuf::int32 AuthReply::err() const {
  // @@protoc_insertion_point(field_get:auth.AuthReply.err)
  return err_;
}
inline void AuthReply::set_err(::google::protobuf::int32 value) {
  
  err_ = value;
  // @@protoc_insertion_point(field_set:auth.AuthReply.err)
}

// string msg = 2;
inline void AuthReply::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthReply::msg() const {
  // @@protoc_insertion_point(field_get:auth.AuthReply.msg)
  return msg_.GetNoArena();
}
inline void AuthReply::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.AuthReply.msg)
}
#if LANG_CXX11
inline void AuthReply::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthReply.msg)
}
#endif
inline void AuthReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.AuthReply.msg)
}
inline void AuthReply::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.AuthReply.msg)
}
inline ::std::string* AuthReply::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:auth.AuthReply.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthReply::release_msg() {
  // @@protoc_insertion_point(field_release:auth.AuthReply.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthReply::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:auth.AuthReply.msg)
}

// .auth.AuthInfo data = 3;
inline bool AuthReply::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline void AuthReply::clear_data() {
  if (GetArenaNoVirtual() == NULL && data_ != NULL) {
    delete data_;
  }
  data_ = NULL;
}
inline const ::auth::AuthInfo& AuthReply::_internal_data() const {
  return *data_;
}
inline const ::auth::AuthInfo& AuthReply::data() const {
  const ::auth::AuthInfo* p = data_;
  // @@protoc_insertion_point(field_get:auth.AuthReply.data)
  return p != NULL ? *p : *reinterpret_cast<const ::auth::AuthInfo*>(
      &::auth::_AuthInfo_default_instance_);
}
inline ::auth::AuthInfo* AuthReply::release_data() {
  // @@protoc_insertion_point(field_release:auth.AuthReply.data)
  
  ::auth::AuthInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::auth::AuthInfo* AuthReply::mutable_data() {
  
  if (data_ == NULL) {
    auto* p = CreateMaybeMessage<::auth::AuthInfo>(GetArenaNoVirtual());
    data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:auth.AuthReply.data)
  return data_;
}
inline void AuthReply::set_allocated_data(::auth::AuthInfo* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete data_;
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:auth.AuthReply.data)
}

// -------------------------------------------------------------------

// AuthInfo

// string token = 1;
inline void AuthInfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthInfo::token() const {
  // @@protoc_insertion_point(field_get:auth.AuthInfo.token)
  return token_.GetNoArena();
}
inline void AuthInfo::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:auth.AuthInfo.token)
}
#if LANG_CXX11
inline void AuthInfo::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:auth.AuthInfo.token)
}
#endif
inline void AuthInfo::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:auth.AuthInfo.token)
}
inline void AuthInfo::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:auth.AuthInfo.token)
}
inline ::std::string* AuthInfo::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:auth.AuthInfo.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthInfo::release_token() {
  // @@protoc_insertion_point(field_release:auth.AuthInfo.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthInfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:auth.AuthInfo.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_auth_2eproto
